import "./chunk-F3FYYIAV.js";

// node_modules/ukiyojs/dist/ukiyo.esm.min.js
var t = function(t2) {
  return Array.prototype.slice.call(t2);
};
var e = function() {
  var t2 = window.navigator.userAgent, e2 = !!t2.match(/iPad/i) || !!t2.match(/iPhone/i), i2 = !!t2.match(/WebKit/i);
  return e2 && i2 && !t2.match(/CriOS/i);
};
var i = { scale: 1.5, speed: 1.5, wrapperClass: null, willChange: false, externalRAF: false };
var n = function(t2, e2) {
  var n2 = this;
  if (this.element = t2, this.wrapper = document.createElement("div"), this.options = Object.assign({}, i, e2), this.updateOptions(), this.vh = document.documentElement.clientHeight, this.isVisible = false, this.damp = this.calcDamp(document.documentElement.clientWidth), this.elementTagName = t2.tagName.toLowerCase(), "img" === this.elementTagName) {
    var r2 = t2.getAttribute("src");
    if (!r2)
      return;
    (async function(t3) {
      var e3 = new Image();
      return e3.src = t3, await e3.decode(), e3;
    })(r2).then(function() {
      n2.createParallax();
    });
  } else
    this.createParallax();
};
n.prototype.createParallax = function() {
  this.setStyle(true), this.wrapElement(), e() || this.createObserver();
}, n.prototype.updateOptions = function() {
  var t2 = this.element.getAttribute("data-u-scale"), e2 = this.element.getAttribute("data-u-speed"), i2 = this.element.getAttribute("data-u-willchange");
  null !== t2 && (this.options.scale = Number(t2)), null !== e2 && (this.options.speed = Number(e2)), null !== i2 && (this.options.willChange = true);
}, n.prototype.setStyle = function(t2) {
  void 0 === t2 && (t2 = false);
  var e2 = this.element.clientHeight, i2 = this.element.clientWidth, n2 = window.getComputedStyle(this.element), r2 = "absolute" === n2.position, o = this.wrapper.style, a = this.element.style, s = this.options.scale;
  r2 && "0px" !== n2.marginRight && "0px" !== n2.marginLeft && n2.marginLeft === n2.marginRight && (o.margin = "auto"), "0px" === n2.marginTop && "0px" === n2.marginBottom || (o.marginTop = n2.marginTop, o.marginBottom = n2.marginBottom, a.marginTop = "0", a.marginBottom = "0"), "auto" !== n2.inset && (o.top = n2.top, o.right = n2.right, o.bottom = n2.bottom, o.left = n2.left, a.top = "0", a.right = "0", a.bottom = "0", a.left = "0"), "none" !== n2.transform && (o.transform = n2.transform), "auto" !== n2.zIndex && (o.zIndex = n2.zIndex), o.position = r2 ? "absolute" : "relative", "auto" !== n2.gridArea && "auto / auto / auto / auto" !== n2.gridArea && (o.gridArea = n2.gridArea, a.gridArea = "auto"), t2 && (o.width = "100%", o.overflow = "hidden", a.display = "block", a.overflow = "hidden", a.backfaceVisibility = "hidden", "0px" !== n2.padding && (a.padding = "0"), "img" === this.elementTagName ? a.objectFit = "cover" : "video" !== this.elementTagName && (a.backgroundPosition = "center")), "0px" !== n2.borderRadius && (o.borderRadius = n2.borderRadius, o.isolation || (o.isolation = "isolate"), "0px" !== n2.marginLeft && (o.marginLeft = n2.marginLeft, a.marginLeft = "0"), "0px" !== n2.marginRight && (o.marginRight = n2.marginRight, a.marginRight = "0"), o.width = i2 + "px"), r2 && (o.width = i2 + "px", a.width = "100%"), "none" !== n2.maxHeight && (o.maxHeight = n2.maxHeight, a.maxHeight = "none"), "0px" !== n2.minHeight && (o.minHeight = n2.minHeight, a.minHeight = "none"), a.width = i2 + "px", o.setProperty("height", e2 + "px", "important"), a.setProperty("height", e2 * s + "px", "important"), this.wrapperHeight = e2, this.overflow = Math.floor(10 * (e2 - e2 * s)) / 10;
}, n.prototype.wrapElement = function() {
  var t2 = this.element.getAttribute("data-u-wrapper-class") || this.options.wrapperClass;
  t2 && this.wrapper.classList.add(t2);
  var e2 = this.element.closest("picture"), i2 = null !== e2 ? e2 : this.element, n2 = i2.parentNode;
  null !== n2 && n2.insertBefore(this.wrapper, i2), this.wrapper.appendChild(i2);
}, n.prototype.checkVisible = function() {
  var t2 = this.wrapper.getBoundingClientRect();
  t2.bottom > 0 && t2.top < window.innerHeight ? this.onEnter() : this.onLeave();
}, n.prototype.createObserver = function() {
  var t2 = this;
  this.observer = new IntersectionObserver(function(e2) {
    e2[0].isIntersecting ? t2.onEnter() : t2.onLeave();
  }, { root: null, rootMargin: "0px", threshold: 0 }), this.observer.observe(this.wrapper);
}, n.prototype.onEnter = function() {
  var t2 = this.element.style, e2 = "transform";
  this.options.willChange && t2.willChange !== e2 && (t2.willChange = e2), this.isVisible = true;
}, n.prototype.onLeave = function() {
  var t2 = this.element;
  this.options.willChange && "transform" === t2.style.willChange && (t2.style.willChange = ""), this.isVisible = false;
}, n.prototype.calcTranslateValue = function() {
  var t2 = window.pageYOffset;
  t2 < 0 && (t2 = 0);
  var e2 = this.wrapper.getBoundingClientRect().top + t2, i2 = (t2 + this.vh - e2) / ((this.vh + this.wrapperHeight) / 100), n2 = Math.min(100, Math.max(0, i2)) / 100, r2 = this.overflow, o = this.options.speed, a = (r2 * o - r2) / 2, s = r2 * (1 - n2) * o * this.damp - a;
  return Number(s.toFixed(4));
}, n.prototype.calcDamp = function(t2) {
  var e2 = this.options.scale, i2 = this.options.speed;
  if (!(i2 >= 1.4 || e2 >= 1.4) || !(t2 <= 1e3))
    return 1;
  e2 < 1 && (e2 = 1), i2 < 1 && (i2 = 1);
  var n2 = 1.2 - (1 - (t2 / 1e3 + (3 - (e2 + i2)))), r2 = Math.max(0.5, Math.min(1, n2));
  return Math.floor(100 * r2) / 100;
}, n.prototype.applyParallax = function() {
  this.element.style.transform = "translate3d(0 , " + this.calcTranslateValue() + "px , 0)";
}, n.prototype.animate = function() {
  e() && this.checkVisible(), window.pageYOffset < 0 || this.isVisible && this.applyParallax();
}, n.prototype.reset = function() {
  this.damp = this.calcDamp(window.innerWidth);
  var t2 = this.wrapper.style, e2 = this.element.style;
  this.vh = document.documentElement.clientHeight, t2.width = "", t2.position = "", t2.height = "100%", e2.width = "", "img" === this.elementTagName && "absolute" === t2.position && (t2.height = "100%"), "" === t2.gridArea ? e2.height = "" : e2.height = "100%", "0px" !== t2.margin && (t2.margin = "", e2.margin = ""), "auto" !== t2.inset && (t2.top = "", t2.right = "", t2.bottom = "", t2.left = "", e2.top = "", e2.right = "", e2.bottom = "", e2.left = ""), "none" !== t2.transform && (t2.transform = "", e2.transform = ""), "auto" !== t2.zIndex && (t2.zIndex = ""), "0px" !== t2.borderRadius && (t2.borderRadius = "", t2.isolation = ""), this.setStyle(), this.applyParallax();
}, n.prototype.destroy = function() {
  var t2;
  this.observer && this.observer.disconnect(), this.wrapper.removeAttribute("style"), this.element.removeAttribute("style"), (t2 = this.wrapper).replaceWith.apply(t2, this.wrapper.childNodes);
};
var r = function(e2, i2) {
  if (!e2)
    throw new Error("Argument 'elements' cannot be null.");
  var n2, r2;
  this.instances = [], this.externalRAF = i2 && i2.externalRAF || false, this.onResizeEvent = this.resize.bind(this), n2 = "undefined" != typeof Promise && -1 !== Promise.toString().indexOf("[native code]"), r2 = "undefined" != typeof Element && Element.prototype.closest, n2 && r2 && "IntersectionObserver" in window && this.init(function(e3) {
    return Array.isArray(e3) ? e3 : "string" == typeof e3 ? t(document.querySelectorAll(e3)) : e3 instanceof HTMLElement ? [e3] : e3 instanceof NodeList || e3 instanceof HTMLCollection ? t(e3) : [e3];
  }(e2), i2);
};
r.prototype.init = function(t2, e2) {
  this.instances = t2.map(function(t3) {
    return new n(t3, e2);
  }), this.externalRAF || this.animate(), navigator.userAgent.match(/(iPhone|iPad|iPod|Android)/) ? window.addEventListener("orientationchange", this.onResizeEvent) : window.addEventListener("resize", this.onResizeEvent);
}, r.prototype.animate = function() {
  this.instances.forEach(function(t2) {
    t2.animate();
  }), this.externalRAF || (this.requestId = window.requestAnimationFrame(this.animate.bind(this)));
}, r.prototype.reset = function() {
  this.instances.forEach(function(t2) {
    t2.reset();
  });
}, r.prototype.resize = function() {
  clearTimeout(this.timer), this.timer = window.setTimeout(this.reset.bind(this), 500), this.reset.bind(this);
}, r.prototype.destroy = function() {
  this.requestId && window.cancelAnimationFrame(this.requestId), window.removeEventListener("resize", this.onResizeEvent), window.removeEventListener("orientationchange", this.onResizeEvent), this.instances.forEach(function(t2) {
    t2.destroy();
  });
};
export {
  r as default
};
//# sourceMappingURL=ukiyojs.js.map
