import "./chunk-F3FYYIAV.js";

// node_modules/vanilla-infinite-marquee/infinite-marquee.mjs
var InfiniteMarquee = class {
  constructor(e = {}) {
    this.element = "string" == typeof e.element ? [...document.querySelectorAll(e.element)] : e.element, this.direction = e.direction || "left", this.spaceBetween = e.spaceBetween || "0px", this.gap = { vertical: e.gap && e.gap.vertical || "5px", horizontal: e.gap && e.gap.horizontal || "0px" }, this.speed = e.speed || 1e4, this.fullContainer = e.fullContainer || false, this.smoothEdges = e.smoothEdges || false, this.pauseOnHover = e.pauseOnHover || false, this.duplicateCount = e.duplicateCount || 1, this.breakpointSize = e.breakpointSize || 1023, this.desktopBreakpoint = this.breakpointSize + 1, this.mobileSettings = e.mobileSettings || {}, this.destroyOnDesktop = e.destroyOnDesktop || false, this.destroyOnMobile = e.destroyOnMobile || false, this.elementClass = e.elementClass || "marquee-container", this.on = { beforeInit: e.on && e.on.beforeInit || null, afterInit: e.on && e.on.afterInit || null, pauseAnimation: e.on && e.on.pauseAnimation || null, resumeAnimation: e.on && e.on.resumeAnimation || null }, this.scrollType = "top" === e.direction || "bottom" === e.direction ? "vertical" : "horizontal", this.debugging = e.debugging || false, this.animateMotion = true, this.isMarqueeInitialized = false, !this.isMarqueeInitialized && this.init(), "undefined" != typeof window && (this.destroyOnResponsive(), (this.destroyOnMobile || this.destroyOnDesktop) && window.addEventListener("resize", this.destroyOnResponsive.bind(this)));
  }
  init() {
    if ("undefined" == typeof window && "undefined" == typeof document || !(Array.isArray(this.element) ? this.element.length > 0 : this.element))
      this.debugging && console.error("ðŸšŠ Infinite Marquee - Failed to Initialize");
    else {
      if (this.debugging && console.log("ðŸšŠ Infinite Marquee - Initialized"), window.matchMedia("(prefers-reduced-motion: reduce)").matches && (this.animateMotion = false, this.debugging && console.log('ðŸšŠ Infinite Marquee - "prefers-reduced-motion" is Reduced')), "function" == typeof this.on.beforeInit && this.on.beforeInit(), Array.isArray(this.element)) {
        this.isMarqueeInitialized = true;
        for (const e of this.element)
          this.configureChildNodes(e), this.configureAnimationOptions(e);
        this.debugging && console.log("ðŸšŠ Infinite Marquee - DOM Nodes Created from Array");
      } else
        this.isMarqueeInitialized = true, this.configureChildNodes(this.element), this.configureAnimationOptions(this.element), this.debugging && console.log("ðŸšŠ Infinite Marquee - DOM Nodes Created from Single Element");
      "function" == typeof this.on.afterInit && this.on.afterInit();
    }
  }
  configureChildNodes(e) {
    const i = document.createElement("div");
    for (i.classList.add(`${this.scrollType}-marquee-inner`); e.firstChild; )
      i.appendChild(e.firstChild);
    e.classList.add(`${this.scrollType}-marquee`), e.appendChild(i), this.duplicateOriginalNodes(i), this.duplicateContainer(e), this.debugging && console.log("ðŸšŠ Infinite Marquee - DOM Nodes Appended Successfully");
  }
  duplicateOriginalNodes(e) {
    const i = e.children, t = [];
    for (let e2 = 0; e2 < i.length; e2++) {
      const s = i[e2].cloneNode(true);
      s.setAttribute("aria-hidden", true), t.push(s);
    }
    for (const i2 of t)
      e.appendChild(i2);
    this.debugging && console.log("ðŸšŠ Infinite Marquee - DOM Nodes Duplicated Successfully");
  }
  duplicateContainer(e) {
    const i = e.querySelector(`.${this.scrollType}-marquee-inner`), t = i.cloneNode(true);
    t.setAttribute("aria-hidden", true);
    const s = t.children;
    for (let e2 = 0; e2 < s.length; e2++)
      s[e2].removeAttribute("aria-hidden");
    const n = "vertical" === this.scrollType ? this.duplicateCount + 1 : this.duplicateCount, o = Array.from({ length: n }, () => t.cloneNode(true));
    if (e.append(...o), "vertical" === this.scrollType) {
      const t2 = e.clientHeight - i.clientHeight;
      e.style.setProperty("--_containerSize", `${t2}px`);
    }
  }
  configureAnimationOptions(e) {
    const i = window.matchMedia(`(max-width: ${this.breakpointSize}px)`);
    e.setAttribute("data-animate", this.animateMotion);
    const t = (e2) => {
      e2.addEventListener("mouseenter", () => this.pause(e2)), e2.addEventListener("mouseleave", () => this.resume(e2));
    }, s = () => {
      if (this.isMarqueeInitialized) {
        const s2 = this.mobileSettings.direction || this.direction, n = "right" === s2 || "bottom" === s2, o = "right" === this.direction || "bottom" === this.direction, r = i.matches ? n ? "reverse" : "forwards" : o ? "reverse" : "forwards", a = i.matches && this.mobileSettings.speed || this.speed;
        if (e.style.setProperty("--_speed", `${a}ms`), e.style.setProperty("--_direction", r), this.smoothEdges && e.classList.add("smooth"), "vertical" === this.scrollType) {
          const t2 = i.matches && this.mobileSettings && this.mobileSettings.gap && this.mobileSettings.gap.horizontal || this.gap.horizontal, s3 = i.matches && this.mobileSettings && this.mobileSettings.gap && this.mobileSettings.gap.vertical || this.gap.vertical;
          this.gap.horizontal && e.style.setProperty("--_hGap", t2), this.gap.vertical && e.style.setProperty("--_vGap", s3);
        } else {
          const t2 = i.matches && this.mobileSettings.spaceBetween || this.spaceBetween;
          e.style.setProperty("--_gap", t2), this.fullContainer && e.classList.add("full");
        }
        window.innerWidth >= this.desktopBreakpoint && this.pauseOnHover && this.animateMotion && t(e), this.debugging && console.log(`ðŸšŠ Infinite Marquee - ${this.scrollType} type`), this.debugging && console.log("ðŸšŠ Infinite Marquee - Animation Configs Ready");
      }
    };
    s(), window.addEventListener("resize", this.debounce(s));
  }
  destroyOnResponsive() {
    const e = `${this.scrollType}-marquee-inner`, i = this.element;
    "undefined" != typeof window && (window.innerWidth <= this.breakpointSize && this.destroyOnMobile ? this.manageMarquee(i, e) : window.innerWidth >= this.desktopBreakpoint && this.destroyOnDesktop ? this.manageMarquee(i, e) : this.isMarqueeInitialized || (this.init(), this.isMarqueeInitialized = true));
  }
  manageMarquee(e, i) {
    this.isMarqueeInitialized && (this.destroy(e, i), this.isMarqueeInitialized = false, this.debugging && console.log("ðŸšŠ Infinite Marquee - Destroyed Successfully"));
  }
  removeClassesAfter(e, i) {
    if (i && i.classList) {
      let t = false;
      for (let s = 0; s < i.classList.length; s++) {
        const n = i.classList[s];
        t && (i.classList.remove(n), s--), n === e && (t = true);
      }
    }
  }
  destroy(e, i) {
    if (e) {
      e.removeAttribute("style");
      const t = e.querySelectorAll(`.${i}`);
      for (let i2 = 1; i2 < t.length; i2++)
        e.removeChild(t[i2]);
      const s = e.firstElementChild;
      if (s) {
        if (s.querySelectorAll('[aria-hidden="true"]').forEach(function(e2) {
          s.removeChild(e2);
        }), s.classList.contains(i)) {
          for (; s.firstChild; )
            e.appendChild(s.firstChild);
          e.removeChild(s), this.removeClassesAfter(this.elementClass, e);
        }
      }
    }
  }
  pause(e) {
    (e || this.element).classList.add("paused"), this.debugging && console.log("ðŸšŠ Infinite Marquee - Animation Paused"), "function" == typeof this.on.pauseAnimation && this.on.pauseAnimation();
  }
  resume(e) {
    (e || this.element).classList.remove("paused"), this.debugging && console.log("ðŸšŠ Infinite Marquee - Animation Resumed"), "function" == typeof this.on.resumeAnimation && this.on.resumeAnimation();
  }
  debounce(e, i = 300) {
    let t;
    return (...s) => {
      t && clearTimeout(t), t = setTimeout(() => {
        e(...s);
      }, i);
    };
  }
};
export {
  InfiniteMarquee as default
};
//# sourceMappingURL=vanilla-infinite-marquee.js.map
